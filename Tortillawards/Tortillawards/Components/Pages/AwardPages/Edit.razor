@page "/Awards/edit"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Tortillawards.Data

@attribute [Authorize]

@inject ApplicationDbContext DB
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Award</h4>
<hr />
@if (Award is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Award" OnValidSubmit="UpdateAward" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Award.Id" value="@Award.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Award.Name" class="form-control" />
                    <ValidationMessage For="() => Award.Name" class="text-danger" />
                </div>

                <div class="btn-toolbar mb-2" role="toolbar">
                    <div class="btn-group me-2" role="group">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                    <div class="btn-group me-2" role="group">
                        <a type="button" class="btn btn-link" href="@($"awards/details?id={Id}")">Back to Details</a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Award? Award { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Name: ");
        Award ??= await DB.Awards.FirstOrDefaultAsync(m => m.Id == Id);

        if (Award is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        var ballot = await DB.Ballots
            .Include(x => x.CreatedBy)
            .Where(x => x.Awards.Any(x => x.Id == Id))
            .AsNoTracking()
            .SingleOrDefaultAsync();

        var authState = await authenticationState;

        var user = authState!.User;

        if (ballot!.CreatedBy.Email != user.Identity.Name)
        {
            Console.WriteLine("Not Creator");
            NavigationManager.NavigateTo("/error");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateAward()
    {
        var ballot = await DB.Ballots
            .Include(x => x.CreatedBy)
            .Include(x => x.Awards.Where(x => x.Id == Id))
            .Where(x => x.Awards.Any(x => x.Id == Id))
            .AsNoTracking()
            .SingleOrDefaultAsync();

        var authState = await authenticationState;

        var user = authState!.User;

        if (ballot!.CreatedBy.Email != user.Identity.Name)
        {
            Console.WriteLine("Not Creator");
            NavigationManager.NavigateTo("/error");
        }

        DB.Attach(Award!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AwardExists(Award!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/ballots");
    }

    bool AwardExists(int id)
    {
        return DB.Awards.Any(e => e.Id == id);
    }
}
