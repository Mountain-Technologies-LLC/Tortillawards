@page "/ballots/results"

@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using Tortillawards.Data

@inject ApplicationDbContext DB
@inject NavigationManager NavigationManager

<PageTitle>@(@ballot?.Name ?? "Ballot Details")</PageTitle>

@if (ballot is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>
        @ballot.Name
        <small class="text-body-secondary fs-4 fw-light">By:</small>
        <small class="text-body-secondary">@ballot.CreatedBy</small>
    </h1>

    <h2 class="mb-3">
        Current Results
    </h2>

    @foreach (var awardResult in AwardResults)
    {
        <h5>
            @awardResult.Award.Name
        </h5>

        <ul class="mb-3">
            @foreach (var nominationResult in awardResult.NominationResults)
            {
                <li>
                    @nominationResult.Nomination.Name
                    @nominationResult.VoteCount
                </li>
            }
        </ul>
    }
}

@code {
    Ballot? ballot;
    List<Award> Awards = [];
    List<AwardResultModel> AwardResults = [];

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ballot = await DB.Ballots
            .Include(x => x.CreatedBy)
            .Include(x => x.Awards)
                .ThenInclude(x => x.Nominations)
                    .ThenInclude(x => x.Votes)
            .FirstOrDefaultAsync(m => m.Id == Id);

        if (ballot is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        AwardResults = ballot!.Awards
            .Select(a => new AwardResultModel
            {
                Award = a,
                NominationResults = a.Nominations
                    .Select(n => new NominationResultModel
                    {
                        Nomination = n,
                        VoteCount = n.Votes.Count,
                    })
                    .OrderByDescending(x => x.VoteCount)
                    .ToList(),
            })
            .ToList();

        // return new AwardResultModel
        //     {
        //         Award = a,
        //         NominationResult = []
        //     };

        Awards = ballot!.Awards.ToList();
    }

    private sealed class AwardResultModel
    {
        public required Award Award { get; set; }

        public required List<NominationResultModel> NominationResults { get; set; }
    }

    private sealed class NominationResultModel
    {
        public required Nomination Nomination { get; set; }

        public required int VoteCount { get; set; }
    }
}
