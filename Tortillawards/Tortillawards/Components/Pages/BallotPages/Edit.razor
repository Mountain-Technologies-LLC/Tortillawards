@page "/Ballots/edit"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Tortillawards.Data

@attribute [Authorize]

@inject ApplicationDbContext DB
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Ballot</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Input" OnValidSubmit="UpdateBallot" FormName="edit" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <input type="hidden" name="Input.Id" value="@Input.Id" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Name" class="form-control" placeholder="Please enter ballot name." />
                <label for="name" class="form-label">Name</label>
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>

            <div class="btn-toolbar mb-5" role="toolbar">
                <div class="btn-group me-2" role="group">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>

                <div class="btn-group me-2" role="group">
                    <a class="btn btn-link" href="@($"/ballots/details?id={Id}")">Back to Details</a>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    private string? name;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var ballot = await DB.Ballots.FirstOrDefaultAsync(m => m.Id == Id);

        if (ballot is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        name = ballot!.Name;

        Input.Id ??= ballot.Id;
        Input.Name ??= name;
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateBallot()
    {
        var ballot = await DB.Ballots.FirstOrDefaultAsync(m => m.Id == Id);

        if (ballot is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        ballot!.Name = Input.Name!;

        DB.Attach(ballot!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BallotExists(Input?.Id ?? 0))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo($"/ballots/details?id={Id}");
    }

    bool BallotExists(int id)
    {
        return DB.Ballots.Any(e => e.Id == id);
    }

    private sealed class InputModel
    {
        [Required]
        public int? Id { get; set; }

        [Required]
        public string? Name { get; set; }
    }
}
