@using Tortillawards.Data
@using Tortillawards.Services

@inject VoteService VoteService

@if (Award is null || Award.Nominations is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h4 class="fw-medium">@Award.Name</h4>
    <div class="mb-2">
        Make a choice:

        @if (voting)
        {
            <div id="spinner@(Award.Id)" class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Voting...</span>
            </div>
        }

        @if (votingSuccess == true)
        {
            <svg xmlns="http://www.w3.org/2000/svg" style="vertical-align: -.125em;" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill text-success" viewBox="0 0 16 16">
                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
            </svg>
        }

        @if (votingSuccess == false)
        {
            <svg xmlns="http://www.w3.org/2000/svg" style="vertical-align: -.125em;" width="16" height="16" fill="currentColor" class="bi bi-x-circle-fill text-danger" viewBox="0 0 16 16">
                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293z" />
            </svg>
        }
    </div>

    <InputRadioGroup @bind-Value="VotedNominationId" Name="@($"award{Award.Id}")">
        @foreach (var nomination in Award.Nominations)
        {
            <div class="form-check ms-2">
                @* @onclick="@(e => UpdateHeading(e, buttonNumber))" *@
                @* <input class="form-check-input" type="radio" name="flexRadioDefault" id="nomination" checked> *@
                <InputRadio Value="@nomination.Id" Name="@($"award{Award.Id}")" @onclick="@(() => UpdateVote(nomination.Id))"
                            disabled="@voting" class="form-check-input" id="@($"nomination{nomination.Id}")" />
                <label class="form-check-label" for="@($"nomination{nomination.Id}")">
                    @nomination.Name
                </label>
            </div>
        }
    </InputRadioGroup>
}

<br />

@code {
    [Parameter]
    public required Award Award { get; set; }

    [Parameter]
    public required int? VotedNominationId { get; set; }

    private bool voting = false;
    private bool? votingSuccess = null;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private async Task UpdateVote(int nominationId)
    {
        var originalValue = VotedNominationId;
        try
        {
            votingSuccess = null;
            voting = true;

            StateHasChanged();

            await VoteService.VoteByNominationId(Award.Id, nominationId);

            voting = false;
            votingSuccess = true;

            StateHasChanged();

            await Task.Delay(1000);
            votingSuccess = null;

            StateHasChanged();
        }
        catch (Exception)
        {
            voting = false;
            votingSuccess = false;
            VotedNominationId = originalValue;
            StateHasChanged();
        }
    }

    private async Task OnChangeNominationVoteAsync(ChangeEventArgs e)
    {
        var nominationId = e.Value;
        e.Value = 0;

        Console.WriteLine($"{DateTime.UtcNow} awardId: {nominationId}, Form.nominationId vote: {nominationId}");

        /*
        var votes = await DB.Nomination
            .Include(x => x.Votes.Where(v => v.CreatedBy == user))
            .Where(x => x.Id == nominationId)
            .SelectMany(x => x.Votes)
            .AsNoTracking()
            .ToListAsync();

        if (votes.Any())
            {
            DB.Vote.RemoveRange(votes);
            await DB.SaveChangesAsync();
            }

        var vote = new Data.Vote()
            {
            CreatedBy = user,
            };

        var nominationToAddVote = await DB.Nomination
            .SingleAsync(x => x.Id == nominationId);

        nominationToAddVote.Votes.Add(vote);
        await DB.SaveChangesAsync();
        */
    }
}
